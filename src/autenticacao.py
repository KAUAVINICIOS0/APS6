from .preprocessamento import preprocessar_imagem
from .extracao import extrair_caracteristicas, comparar_digitais
import os

def autenticar(imagem_registrada, imagem_teste, limiar=60):
    """
    Autentica uma impress√£o digital comparando com uma imagem registrada.
    
    Args:
        imagem_registrada (str): Caminho para a imagem registrada
        imagem_teste (str): Caminho para a imagem de teste
        limiar (int): Limiar de similaridade para autentica√ß√£o (0-100)
    
    Returns:
        bool: True se autenticado, False caso contr√°rio
    """
    try:
        print(f"\nüîê Iniciando autentica√ß√£o...")
        print(f"üìÅ Imagem registrada: {os.path.basename(imagem_registrada)}")
        print(f"üìÅ Imagem de teste: {os.path.basename(imagem_teste)}")
        
        # Verificar se os arquivos existem
        if not os.path.exists(imagem_registrada):
            print(f"‚ùå Erro: Imagem registrada n√£o encontrada: {imagem_registrada}")
            return False
            
        if not os.path.exists(imagem_teste):
            print(f"‚ùå Erro: Imagem de teste n√£o encontrada: {imagem_teste}")
            return False
        
        # Pr√©-processar ambas as imagens
        print("\nüîÑ Pr√©-processando imagens...")
        img1 = preprocessar_imagem(imagem_registrada)
        img2 = preprocessar_imagem(imagem_teste)
        
        if img1 is None or img2 is None:
            print("‚ùå Erro no pr√©-processamento das imagens")
            return False
        
        # Extrair caracter√≠sticas
        print("\nüîç Extraindo caracter√≠sticas...")
        _, desc1 = extrair_caracteristicas(img1)
        _, desc2 = extrair_caracteristicas(img2)
        
        if desc1 is None or desc2 is None:
            print("‚ùå Erro na extra√ß√£o de caracter√≠sticas")
            return False
        
        # Comparar as impress√µes digitais
        print("\n‚öñÔ∏è Comparando impress√µes digitais...")
        similaridade = comparar_digitais(desc1, desc2)
        
        print(f"\nüìä RESULTADO DA AUTENTICA√á√ÉO:")
        print(f"   Similaridade: {similaridade:.2f}%")
        print(f"   Limiar: {limiar}%")
        
        # Decis√£o de autentica√ß√£o
        if similaridade >= limiar:
            print("‚úÖ ACESSO PERMITIDO - Impress√µes digitais correspondem!")
            return True
        else:
            print("‚ùå ACESSO NEGADO - Impress√µes digitais n√£o correspondem")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro durante a autentica√ß√£o: {e}")
        return False
